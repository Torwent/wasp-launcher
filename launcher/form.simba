{$DEFINE WS_FORM_INCLUDED}
{$IFNDEF WS_LAUNCHER}
  {$I core.simba}
{$ENDIF}

(*
# WaspForm
Frontend form for the {ref}`WaspClient`.
*)
type
  TWaspForm = record
    Form: TForm;
    Size: TPoint;
    ServerListener: TTimer;
    Updating: record
      SRL: Boolean;
      WaspLib: Boolean;
      Script: Boolean;
    end;
  end;

procedure TWaspForm.HandleLogin(loginPanel: TPanel);
var
  msPanel, dPanel: TPanel;
  id, user: TLabel;
  pass: TEdit;
  scripts: TScriptDataArray;
  listBox: TListBox;
  i, idx: Int32;
begin
  if WaspUpdater.Launcher.Revision < WaspClient.Cache.Launcher.Revision then
  begin
    WaspUpdater.SelfUpdate();
    SimbaCloseCurrentTab();
    WriteLn(LineEnding + LineEnding + LineEnding + LineEnding + 'Wasp Launcher has been updated. Please run it again!' + LineEnding + LineEnding + LineEnding + LineEnding);
    Self.Form.Close();
    TerminateScript();
  end;

  pass := loginPanel.GetChild('password_edit');
  pass.Clear();

  msPanel := Self.Form.GetChild('main_panel');
  dPanel := Self.Form.GetChild('discord_panel');

  user := msPanel.GetChild('user_label');
  id := msPanel.GetChild('id_label');

  user.setCaption('Logged as: ' + WaspClient.Cache.User.Username);
  id.setCaption('ID: ' + WaspClient.Cache.User.Id);

  WaspClient.ApplyNoSubPremiumType();

  scripts := WaspClient.GetAllUserScripts();

  listBox := msPanel.GetChild('scripts_listbox');

  listBox.Clear();
  idx := -1;
  for i := 0 to High(scripts) do
  begin
    listBox.getItems().Add(scripts[i].Name);
    if scripts[i].ID = LauncherConfig.GetString('last_script') then
      idx := i;
  end;

  if idx = -1 then
  begin
    listbox.setItemIndex(0);
    LauncherConfig.Remove('last_script');
  end
  else
    listbox.setItemIndex(0);

  msPanel.Show();
  loginPanel.Hide();
  dPanel.Hide();
  Self._OnScriptChange(listBox);
end;

procedure TWaspForm.HandleLogout(msPanel: TPanel);
var
  loginPanel: TPanel;
begin
  loginPanel := Self.Form.GetChild('login_panel');

  if LauncherConfig.GetBoolean('use_discord') then
    Self._DiscordButton(loginPanel.GetChild('discord_button'))
  else
    loginPanel.Show();
  msPanel.Hide();
end;


procedure TWaspForm._OpenScript(sender: TObject);
var
  list: TListBox;
  script: TScriptData;
  scriptFile: TScriptFile;
begin
  list := sender;
  script := WaspClient.GetAllUserScripts()[list.getItemIndex()];
  LauncherConfig.Put('last_script', script.ID);
  scriptFile := WaspUpdater.GetScriptFile(script.ID);
  SimbaOpenInTab(scriptFile.Path);
  Self.Form.Close();
end;

procedure TWaspForm._OpenScriptEx(sender: TObject);
var
  panel: TPanel;
begin
  panel := TButton(sender).getOwner();
  Self._OpenScript(panel.GetChild('scripts_listbox'));
end;


procedure TWaspForm._InstallProfile(sender: TObject);
var
  name: String;
begin
  WaspUpdater.InstallRLProfile(name);
  MessageDlg('WaspScripts', 'RuneLite profile installed! Please pick "' + name + '" profile before you start botting.', TMsgDlgType.mtInformation, []);
end;

procedure TWaspForm._MailField(sender: TObject; var key: char);
var
  panel: TPanel;
  email, password: TEdit;
  button: TButton;
  strMail: String;
begin
  email := sender;
  panel := email.getOwner().getOwner();
  button := panel.GetChild('login_button');
  password := panel.GetChild('password_edit');
  strMail := email.getText();
  button.setEnabled(strMail.IsEmail() and (password.GetTextLen() > 4));

  case key of
    ' ': key := #0;
    #13: TEdit(sender).PerformTab(True);
  end;
end;

procedure TWaspForm._PasswordField(sender: TObject; var key: char); overload;
var
  panel: TPanel;
  email: TEdit;
  button: TButton;
  strMail: String;
begin
  panel := TEdit(sender).getOwner().getOwner();
  button := panel.GetChild('login_button');
  email := panel.GetChild('email_edit');
  strMail := email.getText();
  button.setEnabled(strMail.IsEmail() and (TEdit(sender).GetTextLen() > 4));

  case key of
    ' ': key := #0;
    #13: TEdit(sender).PerformTab(True);
  end;
end;


procedure TWaspForm._UpdateSRL();
var
  panel: TPanel;
  caption, button: TComponent;
begin
  panel := Self.Form.GetChild('current_version_panel');
  caption := panel.GetChild('current_srl_label');
  panel := panel.GetOwner();
  button := panel.GetChild('update_srl_button');
  WaspUpdater.Update('srlt', caption, button);
end;

procedure TWaspForm._UpdateWL();
var
  panel: TPanel;
  caption, button: TComponent;
begin
  panel := Self.Form.GetChild('current_version_panel');
  caption := panel.GetChild('current_wl_label');

  panel := panel.GetOwner();
  button := panel.GetChild('update_wl_button');

  WaspUpdater.Update('wasplib', caption, button);
end;

procedure TWaspForm._UpdateScript();
var
  list: TListBox;
  script: TScriptData;
begin
  try
    Self.Updating.Script := True;
    list := Self.Form.GetChild('scripts_listbox');
    script := WaspClient.GetAllUserScripts()[list.getItemIndex()];

    if WaspClient.GetUnsubscribedScripts().Find(script.ID) > -1 then
      OpenWebPage("https://waspscripts.com/scripts/" + script.URL)
    else
      WaspUpdater.UpdateScript(script);

    Self._OnScriptChange(list);
  finally
    Self.Updating.Script := False;
  end;
end;

procedure TWaspForm._UpdateScripts(sender: TObject);
var
  list: TListBox;
  data: TScriptDataArray;
  script: TScriptData;
  idx, i: Int32;
begin
  list := Self.Form.GetChild('scripts_listbox');
  data := WaspClient.GetAllUserScripts();

  for i := 0 to list.getItems().getCount()-1 do
  begin
    try
      Self.Updating.Script := True;
      WaspUpdater.UpdateScript(data[i]);
    finally
      Self.Updating.Script := False;
    end;
  end;

  Self._OnScriptChange(list);
end;


procedure TWaspForm._OnTogglePass(sender: TObject);
var
  panel: TPanel;
  edit: TEdit;
  caption: TLabel;
  checkbox: TCheckBox;
begin
  checkbox := sender;
  panel   := checkbox.getParent();
  caption := panel.GetComponent(0);
  panel := panel.getParent();
  edit    := panel.GetChild('password_edit');

  if checkbox.IsChecked() then
  begin
    caption.setCaption('Hide password');
    edit.setPasswordChar(#0);
    Exit;
  end;

  caption.setCaption('Show password');
  edit.setPasswordChar('*');
end;


procedure TWaspForm._OnScriptChange(sender: TObject);
var
  list: TListBox;
  main, panel: TPanel;
  text: TLabel;
  memo: TMemo;
  update, open: TButton;
  checkbox: TCheckBox;
  scriptData: TScriptData;
  scriptFile: TScriptFile;
begin
  list := sender;
  list.Repaint();

  scriptData := WaspClient.GetAllUserScripts()[list.getItemIndex()];
  scriptFile := WaspUpdater.GetScriptFile(scriptData.ID);

  main := list.getOwner().getOwner().getOwner().getOwner();

  panel := main.GetChild('version_panel');

  text := panel.GetChild('current_script_label');
  if scriptFile.Revision = 0 then
    text.setCaption('')
  else
    text.setCaption('rev.' + ToStr(scriptFile.Revision));

  if scriptFile.Revision <> scriptData.Revision then
    text.SetFontColor($1800E9)
  else
    text.SetFontColor($18E982);

  text := panel.GetChild('latest_script_label');
  text.setCaption('rev.' + ToStr(scriptData.Revision));

  if scriptFile.Revision <> scriptData.Revision then
    text.SetFontColor($1800E9)
  else
    text.SetFontColor($18E982);

  update := panel.GetChild('update_script_button');

 case scriptFile.Revision of
    0:
    begin
      if scriptData.Typ = EScriptType.PREMIUM_NO_SUB then
        update.setCaption('Purchase')
      else
        update.setCaption('Install');
    end
    scriptData.Revision: update.setCaption('Re-install');
    else update.setCaption('Update');
  end;

  open  := main.GetChild('script_open_button');
  open.setEnabled(scriptFile.Revision <> 0);

  checkbox := panel.GetChild('update_script_checkbox');

  checkbox.SetChecked(LauncherConfig.GetBoolean('update_' + scriptData.ID));
  if checkbox.IsChecked() and (scriptFile.Revision <> scriptData.Revision) then
  begin
    WaspUpdater.UpdateScript(scriptData);
    Self._OnScriptChange(sender);
    Exit;
  end;

  panel := main.GetChild('script_panel');
  text := panel.GetChild('script_name_label');
  text.setCaption(scriptData.Name);

  text := panel.GetChild('script_category_label');
  case scriptData.Typ of
    EScriptType.PREMIUM:
    begin
      text.setCaption('Premium');
      text.SetFontColor($4DB5FF);
    end;
    EScriptType.FREE:
    begin
      text.setCaption('Free');
      text.SetFontColor($F0F0F0);
    end;
    EScriptType.PREMIUM_NO_SUB:
    begin
      text.setCaption('Premium - Not owned');
      text.SetFontColor($FFFF00);
    end;
  end;
  text.setLeft(panel.getWidth() - text.GetTrueWidth() - TControl.AdjustToDPI(5));

  memo := panel.GetChild('script_content_memo');
  memo.setText(scriptData.Description + LineEnding + LineEnding + scriptData.Content);

  if not FileExists(WaspClient.AssetsPath + scriptData.ID + DirectorySeparator + 'banner.jpg') then
    WaspClient.DownloadImage(scriptData.ID, 'banner');

  panel.SwapImage(WaspClient.AssetsPath + scriptData.ID + DirectorySeparator + 'banner.jpg');
end;

procedure TWaspForm._OnScriptOnKeyDown(sender: TObject; var key: Char);
var
  panel: TPanel;
  edit: TEdit;
  str: String;
  tmp: Char;
begin
  tmp := key;
  key := #0;

  case tmp of
    ' ': Self._UpdateScript();
    #13: Self._OpenScript(sender);
  end;

  panel := TControl(sender).getParent().getParent().getParent().getParent();
  edit := panel.GetChild('search_edit');
  str := edit.getText();
  if tmp = #08 then
  begin
    SetLength(str, Length(str)-1);
    edit.setText(str);
    Exit;
  end;

  edit.setText(str + tmp);
end;

procedure TWaspForm._OnScriptSearchChange(sender: TObject);
var
  parent: TControl;
  list: TListBox;
  edit: TEdit;
  query: String;
  i: Int32;
begin
  parent := TControl(sender).getParent();
  while parent.getName() <> 'scripts_panel' do parent := parent.getParent();

  list := parent.GetChild('scripts_listbox');
  edit := parent.GetChild('search_edit');

  query := LowerCase(Trim(edit.GetText()));
  if (query = '') then Exit;

  for i := 0 to list.getItems().getCount() - 1 do
    if list.getItems().getStrings(i).Lower().Contains(query) then
    begin
      list.setItemIndex(i);
      list.SetFocus();
      Self._OnScriptChange(list);
      Break;
    end;
end;


procedure TWaspForm.SetDarkTheme(sender: TWinControl);
var
  name: String;
begin
  name := sender.getName();
  if (name = '') or name.Contains('label') then Exit;

  if name.Contains('edit') then
    SetWindowTheme(sender.getHandle(), 'DarkMode_CFD')
  else
    SetWindowTheme(sender.getHandle(), 'DarkMode_Explorer');

  AllowDarkModeForWindow(sender.getHandle(), True);
end;

procedure TWaspForm.SetChildsDarkTheme(sender: TWinControl);
var
  i: Int32;
begin
  for i := 0 to sender.getComponentCount() - 1 do
    Self.SetChildsDarkTheme(sender.GetComponent(i));
  Self.SetDarkTheme(sender);
end;

procedure TWaspForm.SetAllChildsDarkTheme();
var
  i: Int32;
  child: TControl;
begin
  for i := 0 to Self.Form.getComponentCount() - 1 do
  begin
    child := Self.Form.GetComponent(i);
    Self.SetChildsDarkTheme(child);
  end;

  SetWindowTheme(Self.Form.getHandle(), 'DarkMode_Explorer');
  AllowDarkModeForWindow(Self.Form.getHandle(), True);
  RefreshImmersiveColorPolicyState();
  FlushMenuThemes();
end;


procedure TWaspForm.SetupDiscordPanel(form: TForm);
  type TWaspForm = TWaspForm;
  procedure TWaspForm._CancelButton(sender: TObject);
  var
    lPanel, dPanel: TPanel;
  begin
    LauncherConfig.Put('use_discord', False);
    dPanel := TButton(sender).getOwner();
    lPanel := Self.Form.GetChild('login_panel');
    lPanel.Show();
    dPanel.Hide();
    CloseFile(CreateFile(WaspAsync.Path + 'server-stop'));
    Self.ServerListener.setEnabled(False);
  end;

var
  panel: TPanel;
  cancel: TButton;
  caption, info: TLabel;
  h, w: Int32;
begin
  panel.Create(form);
  panel.setName('discord_panel');
  panel.setCaption('');
  panel.setWidth(TControl.AdjustToDPI(600));
  panel.setHeight(TControl.AdjustToDPI(300));

  h := panel.getHeight() div 2;
  w := panel.getWidth() div 2;

  panel.SetLeft(Self.Size.X div 2 - w);
  panel.SetTop(Self.Size.Y div 2 - (panel.getHeight() - (panel.getHeight() div 10)));
  panel.setBevelWidth(0);
  panel.Hide();

  caption.Create(panel);
  caption.SetName('discord_label');
  caption.SetTop(h);
  caption.SetFontSize(32);
  caption.SetCaption('Sign In On Your Browser');
  caption.SetLeft(w - caption.GetTrueWidth() div 2);

  info.Create(panel);
  info.SetName('discord_info_label');
  info.SetTop(h + h div 3);
  info.SetCaption('This page will refresh once you''re signed in.');
  info.SetLeft(w - info.GetTrueWidth() div 2);

  cancel.Create(panel);
  cancel.SetName('cancel_button');
  cancel.SetCaption('Cancel');
  cancel.setWidth(panel.getWidth() div 3);
  cancel.SetLeft(w - cancel.getWidth() div 2);
  cancel.SetTop(info.getTop() + info.getHeight() + TControl.AdjustToDPI(20));
  cancel.setOnClick(@Self._CancelButton);
end;



procedure TWaspForm._LogoutButton(sender: TObject);
begin
  if WaspClient.Logout() then
    Self.HandleLogout(TButton(sender).getParent().getParent());
end;



procedure TWaspForm._OnListen(sender: TObject);
var
  token: String;
  i: Int32;
  {$IFDEF DEVELOPER_MODE}t: Double;{$ENDIF}
begin
  {$IFDEF DEVELOPER_MODE}t := PerformanceTimer();{$ENDIF}
  if FileExists(WaspAsync.Path + 'server-failed.done') then
  begin
    DeleteFile(WaspAsync.Path + 'server-failed.done');
    TTimer(sender).setEnabled(False);
    Self._CancelButton(Self.Form.GetChild('cancel_button'));
    Exit;
  end;

  if not FileExists(WaspAsync.Path + 'server-success.done') then Exit;

  token := ReadFileContents(WaspAsync.Path + 'server-success.done');
  DeleteFile(WaspAsync.Path + 'server-success.done');
  TTimer(sender).setEnabled(False);
  CloseFile(CreateFile(WaspAsync.Path + 'server-stop'));

  if (token <> '') and WaspClient.FinishOAuth2Login(token) then
  begin
    Self.HandleLogin(Self.Form.GetChild('login_panel'));
    {$IFDEF DEVELOPER_MODE}
    WriteLn('Full login took: ', Round(PerformanceTimer()-t, 4), 'ms.');
    {$ENDIF}
    Exit;
  end;
end;

procedure TWaspForm.Listen();
begin
  Self.ServerListener.setOnTimer(@Self._OnListen);
  Self.ServerListener.setEnabled(True);
end;

procedure TWaspForm.SetupLoginPanel(form: TForm);
  type TWaspForm = TWaspForm;

  procedure TWaspForm._LoginButton(sender: TObject);
  var
    loginPanel, msPanel: TPanel;
    email, password: TEdit;
    {$IFDEF DEVELOPER_MODE}
    t: Double;
    {$ENDIF}
  begin
    {$IFDEF DEVELOPER_MODE}
    t := PerformanceTimer();
    {$ENDIF}

    loginPanel := TComponent(sender).getOwner();
    msPanel := Self.Form.GetChild('main_panel');

    email := loginPanel.GetChild('email_edit');
    password := loginPanel.GetChild('password_edit');

    if WaspClient.Login(email.getText(), password.getText()) then
    begin
      Self.HandleLogin(loginPanel);
      {$IFDEF DEVELOPER_MODE}
      WriteLn('Full login took: ', Round(PerformanceTimer()-t, 4), 'ms.');
      {$ENDIF}
      Exit;
    end;

    with email.getFont() do
    begin
      setColor($0000FF);
      setStyle([]);
    end;

    with password.getFont() do
    begin
      setColor($0000FF);
      setStyle([]);
    end;
  end;

  procedure TWaspForm._Validate(edit: TEdit);
  var
    panel: TPanel;
    email, password: TEdit;
    strMail: String;
    button: TButton;
  begin
    panel := edit.getOwner().getOwner();

    case edit.getName() of
      'email_edit':
      begin
        email := edit;
        password := panel.GetChild('password_edit');
      end;
      'password_edit':
      begin
        email := panel.GetChild('email_edit');
        password := edit;
      end;
      else
        TerminateScript('TWaspForm._Validate(), unknown control.');
    end;

    with email.getFont() do
    begin
      setStyle([fsBold]);
      setColor($F0F0F0);
    end;

    with password.getFont() do
    begin
      setStyle([fsBold]);
      setColor($F0F0F0);
    end;

    strMail := email.getText();
    button := TButton(panel.GetChild('login_button'));
    button.setEnabled(strMail.IsEmail() and (password.GetTextLen() > 4));

    if button.IsEnabled() then
      Self._LoginButton(button);
  end;

  procedure TWaspForm._OnEmailDone(sender: TObject);
  var
    email: TEdit;
    str: String;
  begin
    Self._Validate(sender);
    email := sender;
    str := LowerCase(Trim(email.getText()));
    if str.IsEmail() then
      LauncherConfig.Put('email', LowerCase(Trim(email.getText())));
  end;

  procedure TWaspForm._OnEmailChange(sender: TObject);
  begin
    Self._OnEmailDone(sender);
  end;

  procedure TWaspForm._OnPassDone(sender: TObject);
  begin
    Self._Validate(sender);
  end;

  procedure TWaspForm._OnPassChange(sender: TObject);
  begin
    Self._OnPassDone(sender);
  end;

  procedure TWaspForm._DiscordButton(sender: TObject);
  var
    lPanel, dPanel: TPanel;
  begin
    LauncherConfig.Put('use_discord', True);
    lPanel := TButton(sender).getOwner();

    dPanel := Self.Form.GetChild('discord_panel');

    dPanel.Show();
    lPanel.Hide();

    WaspClient.StartOAuth2Login();
    DeleteFile(WaspAsync.Path + 'server-failed.done');
    DeleteFile(WaspAsync.Path + 'server-success.done');
    RunScript(WaspAsync.Path + 'server.simba', ['LauncherPID=' + ToString(GetProcessID())]);
    Sync(@Self.Listen);
  end;
var
  panel: TPanel;
  mailEdit, passEdit: TLabeledEdit;
  login, discord: TButton;
  email: String;
  viewPass: TLabeledCheckBox;
begin
  panel.Create(form);
  panel.setName('login_panel');
  panel.setCaption('');
  panel.setWidth(TControl.AdjustToDPI(300));
  panel.setHeight(TControl.AdjustToDPI(180));
  panel.SetLeft(Self.Size.X div 2 - panel.getWidth() div 2);
  panel.SetTop(Self.Size.Y div 2 - (panel.getHeight() - (panel.getHeight() div 10)));
  panel.setBevelWidth(0);

  email := LauncherConfig.GetString('email');
  if email = '' then
    email := 'email@mail.com';

  mailEdit.Create(panel);
  mailEdit.SetName('email');
  mailEdit.SetCaption('Email');
  mailEdit.SetWidth(panel.getWidth());
  mailEdit.SetText(email);
  mailEdit.SetControlColor($303030);
  mailEdit.setControlFontColor($F0F0F0);
  mailEdit.Edit.setOnKeyPress(@Self._MailField);
  mailEdit.Edit.setOnEditingDone(@Self._OnEmailDone);

  passEdit.Create(panel);
  passEdit.SetName('password');
  passEdit.SetCaption('Password');
  passEdit.SetTop(TControl.AdjustToDPI(50));
  passEdit.SetWidth(panel.getWidth());
  passEdit.SetControlColor($303030);
  passEdit.setControlFontColor($F0F0F0);
  passEdit.setPasswordChar('*');
  passEdit.Edit.setOnKeyPress(@Self._PasswordField);
  passEdit.Edit.setOnEditingDone(@Self._OnPassDone);
  passEdit.Edit.setOnChange(@Self._OnPassChange);

  viewPass.Create(panel);
  viewPass.SetName('viewpass');
  viewPass.SetCaption('Show password');
  viewPass.SetLeft(TControl.AdjustToDPI(10));
  viewPass.SetTop(TControl.AdjustToDPI(100));
  viewPass.CheckBox.setOnChange(@Self._OnTogglePass);

  Self._OnTogglePass(viewPass.CheckBox);

  login.Create(panel);
  login.SetName('login_button');
  login.SetCaption('Login');
  login.setWidth(panel.getWidth() div 3);
  login.SetTop(panel.getHeight() - (panel.getHeight() div 4));
  login.setEnabled(False);
  login.setOnClick(@Self._LoginButton);

  discord.Create(panel);
  discord.SetName('discord_button');
  discord.SetCaption('Discord login');
  discord.setWidth(login.getWidth());
  discord.SetLeft(panel.getWidth() - discord.getWidth());
  discord.SetTop(login.GetTop());
  discord.setOnClick(@Self._DiscordButton);
end;


procedure TWaspForm.SetupVersionsPanel(parent: TPanel; top: Int32);
  type TWaspForm = TWaspForm;

  function TWaspForm._VersionsTitleLabel(parent: TPanel; name: String; left: Int32): TPanel;
  var
    textLabel: TLabel;
  begin
    Result.Create(parent);
    Result.setName(LowerCase(name) + '_version_title_panel');
    Result.setCaption('');
    Result.setWidth(TControl.AdjustToDPI(110));
    Result.setHeight(parent.GetHeight());
    Result.SetLeft(left);
    Result.setBevelWidth(0);

    textLabel.Create(Result);
    textLabel.setName(LowerCase(name) + '_srl_title_label');
    textLabel.setCaption(name + ' SRL-T:');
    textLabel.setLeft(TControl.AdjustToDPI(3));
    textLabel.SetFontSize(10);
    textLabel.SetFontQuality(TFontQuality.fqCleartype);

    textLabel.Create(Result);
    textLabel.setName(LowerCase(name) + '_wl_title_label');
    textLabel.setCaption(name + ' WaspLib:');
    textLabel.setLeft(TControl.AdjustToDPI(3));
    textLabel.SetTop(TControl.AdjustToDPI(23));
    textLabel.SetFontSize(10);
    textLabel.SetFontQuality(TFontQuality.fqCleartype);

    textLabel.Create(Result);
    textLabel.setName(LowerCase(name) + '_script_title_label');
    textLabel.setCaption(name + ' Script:');
    textLabel.setLeft(TControl.AdjustToDPI(3));
    textLabel.SetTop(TControl.AdjustToDPI(46));
    textLabel.SetFontSize(10);
    textLabel.SetFontQuality(TFontQuality.fqCleartype);
  end;

  function TWaspForm._VersionsLabel(parent: TPanel; name, srlt, wl: String; left: Int32): TPanel;
  var
    textLabel: TLabel;
  begin
    Result.Create(parent);
    Result.setName(name + '_version_panel');
    Result.setCaption('');
    if name = 'current' then
      Result.setWidth(TControl.AdjustToDPI(90))
    else
      Result.setWidth(TControl.AdjustToDPI(70));
    Result.setHeight(parent.GetHeight());
    Result.SetLeft(left);
    Result.setBevelWidth(0);

    textLabel.Create(Result);
    textLabel.setName(name + '_srl_label');
    if srlt = '' then
      textLabel.setCaption('Missing')
    else if srlt = 'failed' then
      textLabel.setCaption('Rate limited')
    else
      textLabel.setCaption('v.' + srlt);
    textLabel.setLeft(TControl.AdjustToDPI(3));
    textLabel.SetFontSize(10);
    if srlt <> GitHubClient.Packages.Latest.SRLT then
      textLabel.SetFontColor($1800E9)
    else
      textLabel.SetFontColor($18E982);

    textLabel.Create(Result);
    textLabel.setName(name + '_wl_label');

    if wl = '' then
      textLabel.setCaption('Missing')
    else if wl = 'failed' then
      textLabel.setCaption('Rate limited')
    else
      textLabel.setCaption('v.' + wl);

    textLabel.setLeft(TControl.AdjustToDPI(3));
    textLabel.SetTop(TControl.AdjustToDPI(23));
    textLabel.SetFontSize(10);
    if wl <> GitHubClient.Packages.Latest.WaspLib then
      textLabel.SetFontColor($1800E9)
    else
      textLabel.SetFontColor($18E982);

    textLabel.Create(Result);
    textLabel.setName(name + '_script_label');
    textLabel.setLeft(TControl.AdjustToDPI(3));
    textLabel.SetTop(TControl.AdjustToDPI(46));
    textLabel.SetFontSize(10);
  end;

  function TWaspForm._VersionsControls(parent: TPanel; left: Int32): TPanel;
    type TWaspForm = TWaspForm;
    procedure TWaspForm._UpdateButton(sender: TObject);
    begin
      case TButton(sender).getName() of
        'update_srl_button':    {$IFNDEF DEVELOPER_MODE}Sync(@Self._UpdateSRL){$ENDIF};
        'update_wl_button':     {$IFNDEF DEVELOPER_MODE}Sync(@Self._UpdateWL){$ENDIF};
        'update_script_button': Self._UpdateScript();
      end;
    end;

    procedure TWaspForm._AutoUpdateToggle(sender: TObject);
    var
      panel: TPanel;
      button: TButton;
      list: TListBox;
      script: TScriptData;
    begin
      with TCheckBox(sender) do
        case GetName() of
          'update_script_checkbox':
          begin
            list := Self.Form.GetChild('scripts_listbox');
            script := WaspClient.GetAllUserScripts()[list.getItemIndex()];
            LauncherConfig.Put('update_' + script.ID, IsChecked());
          end;

          else
          begin
            LauncherConfig.Put(GetName(), IsChecked());
            panel := TCheckBox(sender).getParent().getParent();
            button := panel.GetChild(GetName().Replace('checkbox', 'button'));
            {$IFNDEF DEVELOPER_MODE}
            if IsChecked() and (button.getCaption() <> 'Re-install') then
              Self._UpdateButton(button);
            {$ENDIF}
          end;
        end;
    end;

  var
    button: TButton;
    check: TLabeledCheckBox;
  begin
    Result.Create(parent);
    Result.setName('version_buttons_panel');
    Result.setCaption('');
    Result.SetLeft(left);
    Result.setWidth(TControl.AdjustToDPI(180));
    Result.setHeight(parent.GetHeight());
    Result.setBevelWidth(0);

    button.Create(Result);
    button.setName('update_srl_button');
    button.setLeft(TControl.AdjustToDPI(3));
    button.setHeight(TControl.AdjustToDPI(20));
    button.setWidth(TControl.AdjustToDPI(70));
    if GitHubClient.Packages.Current.SRLT <> GitHubClient.Packages.Latest.SRLT then
      button.setCaption('Update')
    else
      button.setCaption('Re-install');
    button.setOnClick(@Self._UpdateButton);

    button.Create(Result);
    button.setName('update_wl_button');
    button.setLeft(TControl.AdjustToDPI(3));
    button.SetTop(TControl.AdjustToDPI(23));
    button.setHeight(TControl.AdjustToDPI(20));
    button.setWidth(TControl.AdjustToDPI(70));
    if GitHubClient.Packages.Current.WaspLib <> GitHubClient.Packages.Latest.WaspLib then
      button.setCaption('Update')
    else
      button.setCaption('Re-install');
    button.setOnClick(@Self._UpdateButton);

    button.Create(Result);
    button.setName('update_script_button');
    button.setLeft(TControl.AdjustToDPI(3));
    button.SetTop(TControl.AdjustToDPI(46));
    button.setHeight(TControl.AdjustToDPI(20));
    button.setWidth(TControl.AdjustToDPI(70));
    if GitHubClient.Packages.Current.WaspLib <> GitHubClient.Packages.Latest.WaspLib then
      button.setCaption('Update')
    else
      button.setCaption('Re-install');
    button.setOnClick(@Self._UpdateButton);

    check.Create(Result);
    check.SetName('update_srl');
    check.SetCaption('Auto-update');
    check.setLeft(TControl.AdjustToDPI(90));
    check.SetTop(TControl.AdjustToDPI(2));
    if LauncherConfig.GetBoolean('update_srl_checkbox') then
      check.SetChecked(True);
    check.CheckBox.setOnChange(@Self._AutoUpdateToggle);
    Self._AutoUpdateToggle(check.CheckBox);

    check.Create(Result);
    check.SetName('update_wl');
    check.SetCaption('Auto-update');
    check.SetLeft(TControl.AdjustToDPI(90));
    check.SetTop(TControl.AdjustToDPI(25));
    if LauncherConfig.GetBoolean('update_wl_checkbox') then
      check.SetChecked(True);
    check.CheckBox.setOnChange(@Self._AutoUpdateToggle);
    Self._AutoUpdateToggle(check.CheckBox);

    check.Create(Result);
    check.SetName('update_script');
    check.SetCaption('Auto-update');
    check.SetLeft(TControl.AdjustToDPI(90));
    check.SetTop(TControl.AdjustToDPI(48));
    check.CheckBox.setOnChange(@Self._AutoUpdateToggle);
  end;

var
  panel, tmp: TPanel;
  w, h: Int32;
begin
  panel.Create(parent);
  panel.setName('version_panel');
  panel.setCaption('');
  panel.setAlign(TAlign.alCustom);
  panel.setBorderStyle(TFormBorderStyle.bsNone);
  panel.setBevelWidth(0);
  panel.SetTop(top);
  panel.setHeight(TControl.AdjustToDPI(70));

  tmp := Self._VersionsTitleLabel(panel, 'Current', 0);
  w := tmp.getWidth();
  h := tmp.getHeight();
  tmp := Self._VersionsLabel(panel, 'current', GitHubClient.Packages.Current.SRLT, GitHubClient.Packages.Current.WaspLib, w);
  w += tmp.getWidth();
  h += tmp.getHeight();

  tmp := Self._VersionsTitleLabel(panel, 'Latest', w);
  w += tmp.getWidth();
  h += tmp.getHeight();
  tmp := Self._VersionsLabel(panel, 'latest', GitHubClient.Packages.Latest.SRLT, GitHubClient.Packages.Latest.WaspLib, w);
  w += tmp.getWidth();
  h += tmp.getHeight();

  tmp := Self._VersionsControls(panel, w);
  w += tmp.getWidth();
  h += tmp.getHeight();
  panel.setWidth(w + 20);
  panel.setLeft(Self.Size.X - TControl.AdjustToDPI(40) - w);
end;

procedure TWaspForm.SetupScriptPanel(parent: TPanel; topLeft: TPoint);
var
  panel, memoInnerPanel, memoOutterPanel: TPanel;
  text: TLabel;
  memo: TMemo;
  img: TImage;
begin
  panel.Create(parent);
  panel.setName('script_panel');
  panel.setCaption('');
  panel.SetLeft(topLeft.X);
  panel.SetTop(topLeft.Y);
  panel.setWidth(Self.Size.X - topLeft.X - TControl.AdjustToDPI(40));
  panel.setHeight(Self.Size.Y - topLeft.Y - TControl.AdjustToDPI(80));
  panel.setBevelWidth(0);

  img.Create(panel);
  img.SetBounds(0, 0, panel.getWidth(), TControl.AdjustToDPI(140));
  img.SetStretch(True);
  img.SetName('image_null');

  text.Create(panel);
  text.setName('script_name_label');
  text.SetFontSize(10);
  text.SetFontStyle([TFontStyle.fsBold]);
  text.setLeft(TControl.AdjustToDPI(5));
  text.SetTop(TControl.AdjustToDPI(115));

  text.Create(panel);
  text.setName('script_category_label');
  text.setLeft(-TControl.AdjustToDPI(5));
  text.SetTop(TControl.AdjustToDPI(115));

  memoOutterPanel.Create(panel);
  memoOutterPanel.setName('script_omemo_panel');
  memoOutterPanel.setCaption('');
  memoOutterPanel.SetTop(TControl.AdjustToDPI(145));
  memoOutterPanel.setWidth(panel.getWidth());
  memoOutterPanel.setHeight(panel.getHeight() - memoOutterPanel.GetTop());
  memoOutterPanel.setBevelWidth(0);
  memoOutterPanel.setColor($505050);

  memoInnerPanel.Create(memoOutterPanel);
  memoInnerPanel.setName('script_imemo_panel');
  memoInnerPanel.setCaption('');
  memoInnerPanel.SetTop(TControl.AdjustToDPI(2));
  memoInnerPanel.SetLeft(TControl.AdjustToDPI(2));
  memoInnerPanel.setWidth(memoOutterPanel.getWidth() - TControl.AdjustToDPI(4));
  memoInnerPanel.setHeight(memoOutterPanel.getHeight() - TControl.AdjustToDPI(4));
  memoInnerPanel.setBevelWidth(0);
  memoInnerPanel.setColor($303030);

  memo.Create(memoInnerPanel);
  memo.setName('script_content_memo');
  memo.setLeft(-TControl.AdjustToDPI(2));
  memo.SetTop(-TControl.AdjustToDPI(2));
  memo.setWidth(memoInnerPanel.getWidth() + TControl.AdjustToDPI(4));
  memo.setHeight(memoInnerPanel.getHeight() + TControl.AdjustToDPI(4));
  memo.setColor($303030);
  memo.SetFontColor($D5D5D5);
  memo.setScrollBars(TScrollStyle.ssAutoBoth);
  memo.setReadOnly(True);
  memo.setHideSelection(True);
  memo.setWordWrap(True);
end;


procedure TWaspForm.OnDrawItem(control: TWinControl; idx: Integer; rect: TRect; state: TOwnerDrawState);
var
  listbox: TListBox;
  color, fColor: TColor;
begin
  listbox := control;
  if idx = listbox.getItemIndex() then color := $505050
  else if idx mod 2 = 0 then color := $303030
  else color := $282828;

  if WaspClient.GetAllUserScripts()[idx].Typ = EScriptType.PREMIUM then
    fColor := $4DB5FF
  else if WaspClient.GetAllUserScripts()[idx].Typ = EScriptType.PREMIUM_NO_SUB then
    fColor := $FFFF00
  else
    fColor := $F0F0F0;

  listbox.getCanvas().getBrush().setColor(color);
  listbox.getCanvas().FillRect(rect.Left, rect.Top, rect.Right, rect.Bottom);

  listbox.getCanvas().GetFont().setColor(fColor);
  listbox.getCanvas().getFont().setStyle([TFontStyle.fsBold]);
  listbox.getCanvas().TextRect(rect, 2, rect.Top+2, listbox.getItems().getStrings(idx));
end;


procedure TWaspForm._PanelSwapClick(sender: TObject);
var
  parent, extra, scripts: TPanel;
begin
  parent := TButton(sender).getParent();
  parent := parent.getParent();

  scripts := parent.GetChild('scripts_panel');
  extra := parent.GetChild('extra_panel');


  scripts.setVisible(not scripts.getVisible());
  scripts.setEnabled(not scripts.getEnabled());
  extra.setEnabled(not extra.getEnabled());
  extra.setVisible(not extra.getVisible());
end;

procedure TWaspForm._ClearCache(sender: TObject);
begin
  RMDir(SIMBA_DATA_DIR + 'cache');
  RMDir(SIMBA_DATA_DIR + 'WaspLib');
  RMDir(SIMBA_DATA_DIR + 'wasp-launcher' + DirectorySeparator + 'assets');
  RMDir(SIMBA_DATA_DIR + 'wasp-launcher' + DirectorySeparator + 'downloads');
end;

procedure TWaspForm.SetupScriptsPanel(parent: TPanel);
  type TWaspForm = TWaspForm;

  procedure TWaspForm._OnUserClick(sender: TObject);
  begin
    case TLabel(sender).getName() of
      'user_label': OpenWebPage('https://waspscripts.com/user/' + WaspClient.Cache.User.Id);
      'id_label': SetClipBoard(WaspClient.Cache.User.Id);
    end;
  end;

var
  panel: TPanel;
  user, id, launcherRev: TLabel;
  button: TButton;
  scriptsList: TLabeledDarkListBox;
  search: TLabeledEdit;
begin
  panel.Create(parent);
  panel.setName('scripts_panel');
  panel.setCaption('');
  panel.setWidth(Self.Size.X);
  panel.setHeight(Self.Size.Y);
  panel.setBevelWidth(0);

  user.Create(panel);
  user.setName('user_label');
  user.setCaption('');
  user.setLeft(TControl.AdjustToDPI(10));
  user.SetTop(TControl.AdjustToDPI(20));
  user.SetFontSize(12);
  user.setHint('Click to open your user profile.');
  user.setShowHint(True);
  user.setOnClick(@Self._OnUserClick);

  id.Create(panel);
  id.setName('id_label');
  id.setCaption('');
  id.setLeft(user.getLeft());
  id.SetTop(user.GetTop() + user.GetTrueHeight() + TControl.AdjustToDPI(20));
  id.SetFontSize(10);
  id.setHint('Click to copy the ID to the clipboard.');
  id.setShowHint(True);
  id.setOnClick(@Self._OnUserClick);

  scriptsList.Create(panel);
  scriptsList.SetName('scripts');
  scriptsList.SetCaption('Scripts:');
  scriptsList.SetLeft(id.getLeft());
  scriptsList.SetTop(id.GetTop() + id.getHeight() + TControl.AdjustToDPI(15));
  scriptsList.SetWidth(TControl.AdjustToDPI(260));
  scriptsList.setHeight(Self.Size.Y - scriptsList.GetTop() - TControl.AdjustToDPI(130));
  scriptsList.ListBox.ListBox.setOnClick(@Self._OnScriptChange);
  scriptsList.ListBox.ListBox.setOnKeyPress(@Self._OnScriptOnKeyDown);
  scriptsList.ListBox.ListBox.setStyle(TListBoxStyle.lbOwnerDrawFixed);
  scriptsList.ListBox.ListBox.setOnDrawItem(@Self.OnDrawItem);
  scriptsList.ListBox.ListBox.setColor($242322);

  search.Create(panel);
  search.SetCaption('Search');
  search.SetTop(scriptsList.GetBottom() + TControl.AdjustToDPI(5));
  search.SetLeft(id.getLeft());
  search.SetHeight(TControl.AdjustToDPI(40));
  search.SetWidth(TControl.AdjustToDPI(260));
  search.SetName('search');
  search.SetControlColor($303030);
  search.setControlFontColor($F0F0F0);
  search.Edit.setOnChange(@Self._OnScriptSearchChange);

  button.Create(panel);
  button.setName('extra_button');
  button.setCaption('Extra settings');
  button.SetTop(panel.getHeight() - TControl.AdjustToDPI(70));
  button.setLeft(TControl.AdjustToDPI(10));
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));
  button.setOnClick(@Self._PanelSwapClick);

  button.Create(panel);
  button.setName('logout_button');
  button.SetCaption('Logout');
  button.setOnClick(@Self._LogoutButton);
  button.SetLeft(TControl.AdjustToDPI(10));
  button.SetTop(panel.getHeight() - TControl.AdjustToDPI(35));
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));

  button.Create(panel);
  button.setName('script_open_button');
  button.SetCaption('Open script');
  button.SetOnClick(@Self._OpenScriptEx);
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));
  button.SetTop(panel.getHeight() - TControl.AdjustToDPI(70));
  button.SetLeft(panel.getWidth() - TControl.AdjustToDPI(10) - button.getWidth());

  button.Create(panel);
  button.setName('open_rl_button');
  button.SetCaption('Install RuneLite Profile');
  button.setOnClick(@Self._InstallProfile);
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));
  button.SetTop(panel.getHeight() - TControl.AdjustToDPI(35));
  button.SetLeft(panel.getWidth() - TControl.AdjustToDPI(10) - button.getWidth());

  launcherRev.Create(panel);
  launcherRev.setName('launcher_revision_label');
  launcherRev.setCaption('Launcher revision: ' + ToStr(WaspUpdater.Launcher.Revision));
  launcherRev.SetTop(panel.getHeight() - TControl.AdjustToDPI(30));
  launcherRev.setLeft(Self.Size.X div 2 - launcherRev.GetTrueWidth() div 2);

  Self.SetupVersionsPanel(panel, user.GetTop());
  Self.SetupScriptPanel(
    panel,
    [scriptsList.GetRight() + TControl.AdjustToDPI(30),
     scriptsList.GetTop()   + TControl.AdjustToDPI(30)]
  );
end;

procedure TWaspForm.SetupExtraPanel(parent: TPanel);
var
  panel: TPanel;
  button: TButton;
  info: TLabel;
begin
  panel.Create(parent);
  panel.setName('extra_panel');
  panel.setCaption('');
  panel.setWidth(Self.Size.X);
  panel.setHeight(Self.Size.Y);
  panel.setBevelWidth(0);

  info.Create(panel);
  info.SetCaption(
    '       Work in progress!' + LineEnding + LineEnding +
    'More stuff will be added here in the future!' + LineEnding +
    'Thank you for using WaspScripts :)' + LineEnding + LineEnding +
    'Sorry if things have been bumpy for a few days!'
  );
  info.SetFontSize(60);
  info.setTop(Self.Size.Y div 3);
  info.setLeft(Self.Size.X div 3);

  button.Create(panel);
  button.setName('all_autoupdate_button');
  button.setCaption('Update All Scripts');
  button.SetTop(TControl.AdjustToDPI(70));
  button.setLeft(TControl.AdjustToDPI(10));
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));
  button.setOnClick(@Self._UpdateScripts);

  button.Create(panel);
  button.setName('clear_cache_button');
  button.setCaption('Clear cache');
  button.SetTop(TControl.AdjustToDPI(70));
  button.setLeft(TControl.AdjustToDPI(200));
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));
  button.setOnClick(@Self._ClearCache);

  button.Create(panel);
  button.setName('extra_button');
  button.setCaption('Scripts');
  button.SetTop(panel.getHeight() - TControl.AdjustToDPI(70));
  button.setLeft(TControl.AdjustToDPI(10));
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));
  button.setOnClick(@Self._PanelSwapClick);

  button.Create(panel);
  button.setName('logout_button');
  button.SetCaption('Logout');
  button.setOnClick(@Self._LogoutButton);
  button.SetLeft(TControl.AdjustToDPI(10));
  button.SetTop(panel.getHeight() - TControl.AdjustToDPI(35));
  button.setWidth(TControl.AdjustToDPI(150));
  button.setHeight(TControl.AdjustToDPI(30));

  panel.setVisible(False);
  panel.setEnabled(False);
end;

procedure TWaspForm.SetupMainPanel(form: TForm);
var
  panel: TPanel;
begin
  panel.Create(form);
  panel.setName('main_panel');
  panel.setCaption('');
  panel.setWidth(Self.Size.X);
  panel.setHeight(Self.Size.Y);
  panel.setBevelWidth(0);
  Self.SetupScriptsPanel(panel);
  Self.SetupExtraPanel(panel);
end;


procedure TWaspForm.OnShow(sender: TObject);
begin
  {$IFDEF WINDOWS}
  SetWindowDarkTitleBar(TForm(sender).getHandle());
  Self.SetAllChildsDarkTheme();
  {$ENDIF}

  case WaspClient.IsLoggedIn() of
    True:  Self.HandleLogin(Self.Form.GetChild('login_panel'));
    False: Self.HandleLogout(Self.Form.GetChild('main_panel'));
  end;
end;

procedure TWaspForm.Setup();
var
  launcherRev: TLabel;
begin
  Self.Size := [TControl.AdjustToDPI(900), TControl.AdjustToDPI(600)];

  Self.Form.Init(nil);
  Self.Form.SetName('wasp_form');
  Self.Form.setCaption('WaspScripts');
  Self.Form.setWidth(Self.Size.X);
  Self.Form.setHeight(Self.Size.Y);
  Self.Form.getConstraints().SetInterfaceConstraints(Self.Size.X, Self.Size.Y, Self.Size.X, Self.Size.Y);
  Self.Form.setPosition(TPosition.poScreenCenter);
  //Self.Form.setOnClose(@Self.OnClose);
  Self.Form.setColor($242322);
  Self.Form.setOnShow(@Self.OnShow);

  with Self.Form.getFont() do
  begin
    setQuality(TFontQuality.fqAntialiased);
    setPitch(TFontPitch.fpFixed);
    SetColor($F0F0F0);
  end;

  Self.ServerListener.Init(nil);
  Self.ServerListener.setName('server_listener');
  Self.ServerListener.setInterval(1500);

  Self.SetupLoginPanel(Self.Form);
  Self.SetupDiscordPanel(Self.Form);
  Self.SetupMainPanel(Self.Form);

  launcherRev.Create(Self.Form);
  launcherRev.setName('launcher_revision_label');
  launcherRev.setCaption('Launcher revision: ' + ToStr(WaspUpdater.Launcher.Revision));
  launcherRev.SetTop(Self.Form.getHeight() - TControl.AdjustToDPI(30));
  launcherRev.setLeft(TControl.AdjustToDPI(Self.Size.X) div 2 - launcherRev.getWidth());
  launcherRev.setLeft(Self.Size.X div 2 - launcherRev.GetTrueWidth() div 2);
end;

procedure TWaspForm.Show();
begin
  try
    Self.Form.ShowModal();
  except
    Writeln(GetExceptionMessage());
  finally
    Self.Form.Free();
    Self.ServerListener.setEnabled(False);
    Self.ServerListener.Free();
  end;
end;

procedure TWaspForm.Run();
var
  uxtheme: TLibHandle;
begin
  uxtheme := LoadLibrary('uxtheme.dll');
  RefreshImmersiveColorPolicyState := GetProcAddr(uxtheme, PChar(104));
  AllowDarkModeForWindow := GetProcAddr(uxtheme, PChar(133));
  AllowDarkModeForApp := GetProcAddr(uxtheme, PChar(135));
  SetPreferredAppMode := GetProcAddr(uxtheme, PChar(135));
  FlushMenuThemes := GetProcAddr(uxtheme, PChar(136));

  AllowDarkModeForApp(True);
  SetPreferredAppMode(TPreferredAppMode.AllowDark);

  Self.Setup();
  Sync(@Self.Show);

  FreeLibrary(uxtheme);
  AllowDarkModeForWindow := nil;
  AllowDarkModeForApp := nil;
  SetPreferredAppMode := nil;
  FlushMenuThemes := nil;
  RefreshImmersiveColorPolicyState := nil;
end;

var
  WaspForm: TWaspForm;
